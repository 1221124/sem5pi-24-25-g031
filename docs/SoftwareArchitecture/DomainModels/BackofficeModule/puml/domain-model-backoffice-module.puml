@startuml domain-model-backoffice-module

skinparam packageStyle rectangle
skinparam shadowing false
skinparam classAttributeIconSize 0
skinparam linetype ortho

left to right direction
top to bottom direction

hide methods
hide circle

title Domain Model - Backoffice Module

package UserAggregate #MediumAquaMarine {
  class User <<root entity>>
  class Username <<value object>>
  class Role <<value object>> {
    ADMIN, DOCTOR, NURSE, TECHNICIAN, PATIENT
  }
}
note left of UserAggregate: managed using an IAM\n(external to the system)

package PatientAggregate #LightSalmon {
  class Patient <<root entity>>
  class DateOfBirth <<value object>>
  class Gender <<value object>> {
    MALE, FEMALE
  }
  class MedicalRecordNumber <<value object>>
  note right of MedicalRecordNumber: unique identifier
  class MedicalCondition <<value object>>
  note right of MedicalCondition: optional
  class EmergencyContact <<value object>>
  class AppointmentHistory <<value object>>
}

package StaffAggregate #Pink {
  class Staff <<root entity>>
  class LicenseNumber <<value object>>
  note left of LicenseNumber: unique identifier
  class Specialization <<value object>> {
    CARDIOLOGY, ORTHOPEDICS
  }
  'TODO: REVIEW STAFF AVAILABILITY RELATED CLASSES
  class AvailabilitySlots <<value object>>
  class AppointmentSlots <<value object>>
}

package OperationRequestAggregate #LightGoldenRodYellow {
  class OperationRequest <<root entity>>
  class RequestID <<value object>>
  note right of RequestID: unique identifier
  class DeadlineDate <<value object>>
  class OperationPriority <<value object>> {
    ELECTIVE, URGENT, EMERGENCY
  }
}

package OperationTypeAggregate #PaleGreen {
  class OperationType <<root entity>>
  class OperationTypeID <<value object>>
  note bottom of OperationTypeID: unique identifier
  class OperationTypeName <<value object>>
  class RequiredStaff <<value object>>
  class OperationPhaseDetails <<value object>>
  class OperationPhase <<value object>> {
    ANAESTHESIA_PREPARATION, SURGERY_PROCESS, CLEANING
  }
}

package AppointmentAggregate #IndianRed {
  class Appointment <<root entity>>
  class AppointmentID <<value object>>
  note bottom of AppointmentID: unique identifier
  class AppointmentStatus <<value object>> {
    SCHEDULED, COMPLETED, CANCELED
  }  
}

package SurgeryRoomAggregate #LightBlue {
  class SurgeryRoom <<root entity>>
  class SurgeryRoomID <<value object>>
  note bottom of SurgeryRoomID: unique identifier
  class RoomType <<value object>> {
    OPERATING, CONSULTATION, ICU
  }
  class RoomCapacity <<value object>>
  class AssignedEquipment <<value object>>
  class RoomStatus <<value object>> {
    AVAILABLE, OCCUPIED, UNDER_MAINTENANCE
  }
  class MaintenanceSlots <<value object>>
}

class FullName <<value object>>
class FirstName <<value object>>
class LastName <<value object>>
class ContactInformation <<value object>>
class PhoneNumber <<value object>>
class Email <<value object>>
class DateTime <<value object>>
class Date <<value object>>
class Time <<value object>>
class Slot <<value object>>

class Admin
note right of Admin: conceptual class
class Doctor
note right of Doctor: conceptual class
class Nurse
note top of Nurse: conceptual class
class Technician
note right of Technician: conceptual class

FullName "1" -- "1" FirstName : > has
FullName "1" -- "1" LastName : > has
ContactInformation "1" -- "1" PhoneNumber : > has
ContactInformation "1" -- "1" Email : > has
EmergencyContact "1" -- "1" PhoneNumber : > has
DateTime "1" -- "1" Date : > has
DateTime "1" -- "1" Time : > has
Slot "1" -- "2" DateTime : > consists of
RequiredStaff "1" -- "1..*" Staff : > has
MaintenanceSlots "1" -- "1..*" Slot : > has
AvailabilitySlots "1" -- "1..*" Slot : > has
AppointmentSlots "1" -- "1..*" Slot : > has

User "1" -- "1" Username : > identified by
User "1" -- "1" Email : > has
User "*" -- "1" Role : > has assigned

User "0..1" <-- "0..1" Staff : < references
User "0..1" <-- "1" Patient : < references

Patient "1..*" --- "1" FullName : > has
Patient "*" --- "1" DateOfBirth : > born on
Patient "*" --- "1" Gender : > has
Patient "1" --- "1" MedicalRecordNumber : > identified by
Patient "1" --- "1" ContactInformation : > has
Patient "0..*" --- "0..*" MedicalCondition : > can have
Patient "*" ---"1" EmergencyContact : > has
Patient "1" --- "1" AppointmentHistory : > has

Staff "*" -- "1" FullName : > has
Staff "1" -- "1" LicenseNumber : > identified by
Staff "*" -- "1" Specialization : > has
Staff "1" -- "1" ContactInformation : > has
Staff "1" -- "*" AvailabilitySlots : > has
Staff "1" -- "*" AppointmentSlots : > has

OperationRequest "1" -- "1" RequestID : > identified by
OperationRequest "*" -- "1" Patient : > has
OperationRequest "*" -- "1" Staff : > requested by
OperationRequest "*" -- "1" OperationType : > has
OperationRequest "*" -- "1" DeadlineDate : > has
OperationRequest "*" -- "1" OperationPriority : > has

OperationType "1" -- "1" OperationTypeID : > identified by
OperationType "1" -- "1" OperationTypeName : > has
OperationType "1" -- "1" RequiredStaff : > needs
OperationType "1" -- "1..*" OperationPhaseDetails : > has
OperationPhaseDetails "1" -- "1" OperationPhase : > has
OperationPhaseDetails "1" -- "1" Time : > has

Appointment "1" -- "1" AppointmentID : > identified by
Appointment "1" -- "1" OperationRequest : > has
Appointment "*" -- "1" DateTime : > scheduled to
Appointment "*" -- "1" AppointmentStatus : > has
Appointment "*" -- "1" SurgeryRoom : > happens in

SurgeryRoom "1" -- "1" SurgeryRoomID : > identified by
SurgeryRoom "*" -- "1" RoomType : > is
SurgeryRoom "*" -- "1" RoomCapacity : > has
  'TODO: REVIEW MANY TO MANY
SurgeryRoom "*" -- "1..*" AssignedEquipment : > has
SurgeryRoom "*" -- "1" RoomStatus : > has
SurgeryRoom "*" -- "*" MaintenanceSlots : > has 

Admin --> User : > references
Doctor -- Staff : > is
Nurse -- Staff : > is
Technician -- Staff : > is

Admin -- Staff : > manages
Admin -- Patient : > manages

Admin -- OperationType : > manages
Doctor -- OperationRequest : > manages

@enduml
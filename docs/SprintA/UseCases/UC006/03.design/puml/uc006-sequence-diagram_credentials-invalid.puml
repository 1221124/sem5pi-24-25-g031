@startuml "uc006-sequence-diagram_credentials-invalid"
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline

skinparam classAttributeIconSize 0

title Sequence Diagram (SD) - UC006\nInvalid Credentials

participant BackofficeLoginController as Controller <<application>>
participant BackofficeLoginService as Service <<persistence>>
participant UserDTO as DTO <<data>>
participant User as Domain <<entity>>
database UserRepository as UserRepository <<repository>>
participant IUserRepository as IUserRepository <<interface>>


--> Controller : POST /api/login-backofficeuser\nBody: {username, password}
activate Controller

    Controller -> Service: Login(dto)
    activate Service

        Service -> Domain: new User(dto.getUsername(), dto.getPassword())
        activate Domain
            
            Domain --> Service: user
            deactivate Domain

        alt user exists
        Service -> UserRepository: AddAsync(user)
        activate UserRepository

            UserRepository -> IUserRepository: AddAsync(user)
            activate IUserRepository            
                deactivate IUserRepository
            
            UserRepository --> Service: userRepo
            deactivate UserRepository

        Service -> Domain: userRepo.Equals(userRepo.getPassword(), user.password())
        activate Domain
            Domain --> Service: false
            deactivate Domain


            Service -> Domain: user.loginAttempts++
            activate Domain
                deactivate Domain

            alt user.loginAttempts == 5
                Service -> Domain: userRepo.blockUser()
                activate Domain
                    deactivate Domain

                Controller -> NotificationService: SendNotificationToAdmin(userRepo)
                activate NotificationService
                    NotificationService --> Service: notificationSent
                    deactivate NotificationService
            end

            Service -> UserRepository: UpdateAsync(userRepo)
            activate UserRepository
                UserRepository -> IUserRepository: UpdateAsync(userRepo)
                activate IUserRepository
                    deactivate IUserRepository
                UserRepository --> Service: userRepo
                deactivate UserRepository

        else user does not exist
        Service -> UserRepository: AddAsync(user)
        activate UserRepository

            UserRepository -> IUserRepository: AddAsync(user)
            activate IUserRepository            
                deactivate IUserRepository
            
            UserRepository --> Service: invalid user
            deactivate UserRepository
        end

        Service -> DTO: new UserDTO(userRepo.getUsername())
        activate DTO
            DTO --> Service: userDto
            deactivate DTO

        Service --> Controller: userDto
        deactivate Service

    <-- Controller : 401 Unauthorized\nBody: {error: "Invalid credentials; User blocked"}
    deactivate Controller        
@enduml
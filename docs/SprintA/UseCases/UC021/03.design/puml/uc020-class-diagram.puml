@startuml uc020-class-diagram

skinparam packageStyle rectangle
skinparam shadowing false
skinparam classAttributeIconSize 0
skinparam linetype ortho

left to right direction
top to bottom direction

title Class Diagram (CD) - UC020

class OperationTypeController {
    +GetByName(name: Name): Task<ActionResult<OperationTypeDto>>
    +Create(dto: CreatingOperationTypeDto): Task<ActionResult<OperationTypeDto>>
}

class OperationTypeService {
    +GetByNameAsync(name: Name): Task<OperationTypeDto>
    +ValidateOperationTypeName(name: Name): Task<bool>
    +AddAsync(dto: CreatingOperationTypeDto): Task<OperationTypeDto>
}

class OperationTypeRepository {
    +GetByNameAsync(name: Name): Task<OperationType>
    +AddAsync(dto: CreatingOperationTypeDto): Task<OperationType>
}

interface IOperationTypeRepository {
    +GetByNameAsync(name: Name): Task<OperationType>
    +AddAsync(dto: CreatingOperationTypeDto): Task<OperationType>
}

class CreatingOperationTypeDto {
    +Name: Name
    +Specialization: Specialization
    +RequiredStaff: RequiredStaff
    +PhasesDuration: PhasesDuration
    +getName(): Name
    +getSpecialization(): Specialization
    +getRequiredStaff(): RequiredStaff
    +getPhasesDuration(): PhasesDuration
    +setName(name: Name): void
    +setSpecialization(Specialization: Specialization): void
    +setRequiredStaff(requiredStaff: RequiredStaff): void
    +setPhasesDuration(phasesDuration: PhasesDuration): void
}

class OperationType {
    +Id: OperationTypeID
    +Name: Name
    +Specialization: Specialization
    +RequiredStaff: RequiredStaff
    +PhasesDuration: PhasesDuration
}

class OperationTypeDto {
    +Id: OperationTypeID
    +Name: Name
    +Specialization: Specialization
    +RequiredStaff: RequiredStaff
    +PhasesDuration: PhasesDuration
}

class RequiredStaff {
    - _staff: Dictionary<Role, StaffQuantity>
}
note right of RequiredStaff
    Role can only be a staff role: Doctor, Nurse or Assistant
end note

class StaffQuantity {
    +Quantity: int
}
note right of StaffQuantity
    Quantity must be greater than 0
end note

class Specialization {
    +Designation: Designation
}

class PhasesDuration {
    - _phases: Dictionary<Phase, Duration>
}

enum Phase {
    PREPARATION, SURGERY, CLEANING
}

class Duration {
    +Minutes: int
}

class Name {
    +Name: string
}

class OperationTypeID {
    +Id: Guid
}

enum Role {
    ADMIN, DOCTOR, NURSE, TECHNICIAN, PATIENT
}

OperationTypeController .> OperationTypeService : > uses
OperationTypeController ----> CreatingOperationTypeDto : > creates
OperationTypeController ----> OperationTypeDto : > returns

OperationTypeService -> OperationTypeRepository : > uses
OperationTypeService ---> CreatingOperationTypeDto : > uses
OperationTypeService ---> OperationType : > creates
OperationTypeService ---> OperationTypeDto : > creates

OperationTypeRepository --> IOperationTypeRepository : > implements
OperationTypeRepository --> OperationType : > saves in database

IOperationTypeRepository --> OperationType : > saves in database

CreatingOperationTypeDto --> Name : > has
CreatingOperationTypeDto --> Specialization : > has
CreatingOperationTypeDto --> RequiredStaff : > has
CreatingOperationTypeDto --> PhasesDuration : > has

OperationType --> OperationTypeID : > has
OperationType --> Name : > has
OperationType --> Specialization : > has
OperationType --> RequiredStaff : > has
OperationType --> PhasesDuration : > has

OperationTypeDto --> OperationTypeID : > has
OperationTypeDto --> Name : > has
OperationTypeDto --> Specialization : > has
OperationTypeDto --> RequiredStaff : > has
OperationTypeDto --> PhasesDuration : > has

RequiredStaff --> Role: has
RequiredStaff --> StaffQuantity : > has

PhasesDuration --> Phase : > has
PhasesDuration --> Duration : > has

@enduml